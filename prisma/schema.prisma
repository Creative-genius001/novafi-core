generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  firstname            String
  lastname             String
  email                String    @unique
  password             String
  phone                String    @unique
  novaId               String    @unique @map("nova_id")
  isKycVerified        KycStatus @default(NOT_STARTED) @map("is_kyc_verified")
  isEmailVerified      KycStatus @default(PENDING) @map("is_email_verified")
  twoFaEnabled         Boolean   @default(false) @map("two_fa_enabled")
  twoFaSecret          String?   @map("two_fa_secret")
  referralCode         String?   @unique @map("referral_code")
  referredBy           String?   @map("referred_by")
  refreshToken         String?   @map("refresh_token")
  fireblocksVaultId    String?   @map("fireblocks_vault_id")
  expiresAt            String?   @map("expires_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  lastEmailChangeAt    DateTime? @map("last_email_change_at")
  lastPasswordChangeAt DateTime? @map("last_password_change_at")

  wallet           Wallet?
  transactions     Transaction[]
  notifications    Notification[]
  bvnVerification  BvnVerification?
  depositAddresses DepositAddress[]

  @@index([email])
  @@index([isEmailVerified])
  @@index([isKycVerified])
  @@index([phone])
  @@index([referralCode])
  @@index([novaId])
  @@map("user")
}

model DepositAddress {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  cryptoType String   @map("crypto_type") //BTC, ETH, SOL
  network    String //ERC_20, BEP-20
  address    String   @unique
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, cryptoType, network])
  @@index([userId])
  @@index([cryptoType])
  @@index([isActive])
  @@map("deposit_address")
}

enum KycStatus {
  NOT_STARTED
  PENDING
  FAILED
  VERIFIED
}

model Wallet {
  id            String   @id @default(uuid())
  userId        String   @unique @map("user_id")
  balance       Decimal  @default(0.0)
  bankName      String?  @map("bank_name")
  accountNumber String?  @map("account_number")
  orderRef      String?  @map("order_ref")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderRef])
  @@map("wallet")
}

model Transaction {
  id        String            @id @default(uuid())
  userId    String            @map("user_id")
  amount    Decimal
  fee       Decimal
  type      TransactionType
  status    TransactionStatus
  createdAt DateTime          @default(now()) @map("created_at")

  transfer Transfer?
  deposit  Deposit?
  bill     Bill?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([type])
  @@index([status])
  @@map("transaction")
}

model Transfer {
  id            String  @id @default(uuid())
  transactionId String  @unique @map("transaction_id")
  amount        Decimal
  fee           Decimal
  bank          String
  accountNumber String  @map("account_number")
  recipientName String  @map("recipient_name")
  referenceId   String? @map("reference_id")
  sessionId     String? @map("session_id")

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([referenceId])
  @@index([sessionId])
  @@index([transactionId])
  @@map("transfer")
}

model Deposit {
  id            String  @id @default(uuid())
  transactionId String  @unique @map("transaction_id")
  amount        Decimal
  fee           Decimal
  rate          Decimal
  nairaAmount   Decimal @map("naira_amount")
  network       String  @map("network")
  txHash        String  @map("tx_hash")
  referenceId   String  @map("reference_id")

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([network])
  @@index([transactionId])
  @@index([txHash])
  @@map("deposit")
}

model Bill {
  id            String  @id @default(uuid())
  transactionId String  @unique @map("transaction_id")
  amount        Decimal
  biller        String
  number        String
  referenceId   String  @map("reference_id")

  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@index([referenceId])
  @@index([transactionId])
  @@map("bill")
}

enum TransactionType {
  DEPOSIT
  TRANSFER
  AIRTIME
  ELECTRICITY
  DATA
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REVERSED
}

model Beneficiary {
  id              String @id @default(uuid())
  userId          String @map("user_id")
  bankCode        String @map("bank_code")
  accountNumber   String @map("account_number")
  beneficiaryName String @map("beneficiary_name")
  currency        String @default("NGN")
  bankName        String @map("bank_name")

  @@index([id])
  @@index([userId])
  @@map("beneficiary")
}

model Notification {
  id        String               @id @default(uuid())
  userId    String               @map("user_id")
  title     String
  message   String
  category  NotificationCategory
  type      NotificationType
  status    NotificationStatus   @default(SENT)
  isRead    Boolean              @default(false)
  createdAt DateTime             @default(now()) @map("created_at")
  updatedAt DateTime             @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([category])
  @@index([type])
  @@map("notification")
}

enum NotificationStatus {
  PENDING
  FAILED
  SENT
}

enum NotificationCategory {
  TRANSACTION
  ACTIVITIES
}

enum NotificationType {
  DEPOSIT
  TRANSFER
  SERVICES
}

model BvnVerification {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  middleName   String?  @map("middle_name")
  bvn          String   @map("bvn")
  dateOfBirth  String   @map("date_of_birth")
  email        String   @map("email")
  phoneNumber  String   @map("phone_number")
  nin          String
  gender       String
  bvnReference String   @map("bvn_reference")
  faceImageUrl String?  @map("face_image_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([bvn])
  @@index([bvnReference])
  @@index([userId])
  @@map("bvn_verification")
}
